 ██████╗ ██████╗ ███╗   ██╗ ██████╗ ██████╗  █████╗ ████████╗███████╗██╗
██╔════╝██╔═══██╗████╗  ██║██╔════╝ ██╔══██╗██╔══██╗╚══██╔══╝██╔════╝██║
██║     ██║   ██║██╔██╗ ██║██║  ███╗██████╔╝███████║   ██║   ███████╗██║
██║     ██║   ██║██║╚██╗██║██║   ██║██╔══██╗██╔══██║   ██║   ╚════██║╚═╝
╚██████╗╚██████╔╝██║ ╚████║╚██████╔╝██║  ██║██║  ██║   ██║   ███████║██╗
 ╚═════╝ ╚═════╝ ╚═╝  ╚═══╝ ╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═╝   ╚═╝   ╚══════╝╚═╝

You figured out the instruction set and wrote a VM that passes all the tests!

-----------------------------------------------------------------------------

Download the Bitcoin whitepaper:

    $ curl https://bitcoin.org/bitcoin.pdf -o /tmp/bitcoin.pdf

Check the SHA-256 hash of the downloaded PDF:

    $ sha256sum /tmp/bitcoin.pdf

    # => b1674191a88ec5cdd733e4240a81803105dc412d6c6708d53ab94fc248f4f553

Now use this PDF file as the input for your program.

e.g. If you ran `./run_program instructions.exe` to produce this message,
then you would run `./run_program /tmp/bitcoin.pdf` to execute the contents of the PDF.

When your program has finished, it will print a hex-encoded 256-bit value.
This is the private key for a Bitcoin address that contains 0.125 BTC.

You will probably want to convert this private key to the wallet import format (WIF).
You can import WIF keys into Electrum, etc.

You can do this with the bitcoin-explorer command-line tool:
(https://github.com/libbitcoin/libbitcoin-explorer)

    $ echo <hex-encoded private key> | bx base58check-encode -v 128

You could also use this Ruby script:

* https://gist.github.com/ndbroadbent/522c374d18e6a5d592465ff83d49efe0

More info about WIF: https://en.bitcoin.it/wiki/Wallet_import_format



-----------------------------------------------------------------------------

This Bitcoin programming challenge was sponsored by https://FormAPI.io

  ___                _   ___ ___   _
 | __|__ _ _ _ __   /_\ | _ \_ _| (_)___
 | _/ _ \ '_| '  \ / _ \|  _/| | _| / _ \
 |_|\___/_| |_|_|_/_/ \_\_| |___(_)_\___/
